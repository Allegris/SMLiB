as.POSIXct(strptime("2022-03-31 12:20:14", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-31 14:48:46", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-31 18:57:13", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-31 20:06:28", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-01 04:25:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-01 08:05:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-01 09:48:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-01 13:38:41", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-01 18:36:59", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-01 20:32:41", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-02 05:50:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-02 08:51:10", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-02 15:50:49", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-02 19:15:59", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-02 20:08:52", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-04 04:40:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-04 09:06:50", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-04 14:43:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-04 04:35:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-05 07:49:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-06 04:35:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-06 09:05:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-06 13:49:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-06 15:31:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-07 07:36:00", "%Y-%m-%d %H:%M:%S", tz = "UTC"))
)
temps <- c(35.4, 36.1, 36.3, 36.3, 36.3, 35.8, 36.1, 36.3, 36.3, 36.4,
36.4, 36.3, 36.2, 35.8, 36.4, 36.0, 36.1, 36.4, 36.3, 36.1,
35.8, 36.3, 36.0, 36.4, 36.3, 36.5, 36.3, 35.9, 36.2, 36.1,
36.5, 36.4, 36.3, 36.5, 35.9, 36.6, 36.6, 36.1, 36.4, 36.2,
35.8, 36.2, 36.7, 35.8, 36.6, 36.4, 36.4, 36.6, 36.5, 36.5
)
pulses <- c(80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
80, 80, 80, 80, 80, 80, 80, 80, 80, 70, #first true
75, 61, 85, 85, 68, 74, 64, 80, 85, 67,
95, 86, 82, 90, 72, 70, 84, 83, 85, 85,
82, 72, 82, 74, 85, 68, 78, 83, 85, 87
)
df <- data.frame(times, temps, pulses)
times <- c(as.POSIXct(strptime("2022-03-28 04:35:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-28 08:30:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-28 11:45:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-28 12:52:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-28 13:25:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-28 04:35:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-29 07:55:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-29 08:50:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-29 09:20:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-29 10:35:10", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-29 10:58:36", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-29 11:13:06", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-29 16:05:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-29 20:24:38", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-30 04:45:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-30 07:41:05", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-30 09:50:17", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-30 12:09:43", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-30 13:57:26", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-30 18:58:20", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-30 21:07:37", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-31 04:40:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-31 05:00:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-31 07:26:39", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-31 09:26:40", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-31 12:20:14", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-31 14:48:46", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-31 18:57:13", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-31 20:06:28", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-01 04:25:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-01 08:05:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-01 09:48:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-01 13:38:41", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-01 18:36:59", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-01 20:32:41", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-02 05:50:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-02 08:51:10", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-02 15:50:49", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-02 19:15:59", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-02 20:08:52", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-04 04:40:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-04 09:06:50", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-04 14:43:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-04 04:35:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-05 07:49:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-06 04:35:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-06 09:05:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-06 13:49:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-06 15:31:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-07 07:36:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-07 13:18:00", "%Y-%m-%d %H:%M:%S", tz = "UTC"))
)
temps <- c(35.4, 36.1, 36.3, 36.3, 36.3, 35.8, 36.1, 36.3, 36.3, 36.4,
36.4, 36.3, 36.2, 35.8, 36.4, 36.0, 36.1, 36.4, 36.3, 36.1,
35.8, 36.3, 36.0, 36.4, 36.3, 36.5, 36.3, 35.9, 36.2, 36.1,
36.5, 36.4, 36.3, 36.5, 35.9, 36.6, 36.6, 36.1, 36.4, 36.2,
35.8, 36.2, 36.7, 35.8, 36.6, 36.4, 36.4, 36.6, 36.5, 36.5,
36.6
)
pulses <- c(80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
80, 80, 80, 80, 80, 80, 80, 80, 80, 70, #first true
75, 61, 85, 85, 68, 74, 64, 80, 85, 67,
95, 86, 82, 90, 72, 70, 84, 83, 85, 85,
82, 72, 82, 74, 85, 68, 78, 83, 85, 87,
74
)
df <- data.frame(times, temps, pulses)
ggplot(df, aes(times, temps)) +
geom_point() +
theme_bw(base_size = 9) +
ggtitle("Body temperature") +
xlab("Time") +
ylab("Temperature") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_datetime(labels = date_format("(%d/%m) %H:%M"), breaks = times) +
scale_y_continuous(breaks = seq(35.5, 37.5, by = 0.1)) +
geom_hline(yintercept=36.6, linetype="dashed", color = "blue") +
geom_hline(yintercept=37, linetype="dashed", color = "blue")
ggplot(df, aes(times, pulses)) +
geom_point() +
theme_bw() +
ggtitle("Pulse") +
xlab("Time") +
ylab("Pulse (bpm)") +
ylim(60, 100) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_datetime(labels = date_format("(%d/%m) %H:%M"), breaks = times) +
geom_hline(yintercept=75, linetype="dashed", color = "blue")+
geom_hline(yintercept=90, linetype="dashed", color = "blue")
times <- c(as.POSIXct(strptime("2022-03-28 04:35:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-28 08:30:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-28 11:45:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-28 12:52:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-28 13:25:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-28 04:35:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-29 07:55:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-29 08:50:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-29 09:20:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-29 10:35:10", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-29 10:58:36", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-29 11:13:06", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-29 16:05:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-29 20:24:38", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-30 04:45:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-30 07:41:05", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-30 09:50:17", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-30 12:09:43", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-30 13:57:26", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-30 18:58:20", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-30 21:07:37", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-31 04:40:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-31 05:00:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-31 07:26:39", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-31 09:26:40", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-31 12:20:14", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-31 14:48:46", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-31 18:57:13", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-31 20:06:28", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-01 04:25:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-01 08:05:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-01 09:48:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-01 13:38:41", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-01 18:36:59", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-01 20:32:41", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-02 05:50:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-02 08:51:10", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-02 15:50:49", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-02 19:15:59", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-02 20:08:52", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-04 04:40:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-04 09:06:50", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-04 14:43:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-04 04:35:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-05 07:49:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-06 04:35:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-06 09:05:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-06 13:49:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-06 15:31:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-07 07:36:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-07 13:18:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-07 15:15:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-08 08:04:00", "%Y-%m-%d %H:%M:%S", tz = "UTC"))
)
temps <- c(35.4, 36.1, 36.3, 36.3, 36.3, 35.8, 36.1, 36.3, 36.3, 36.4,
36.4, 36.3, 36.2, 35.8, 36.4, 36.0, 36.1, 36.4, 36.3, 36.1,
35.8, 36.3, 36.0, 36.4, 36.3, 36.5, 36.3, 35.9, 36.2, 36.1,
36.5, 36.4, 36.3, 36.5, 35.9, 36.6, 36.6, 36.1, 36.4, 36.2,
35.8, 36.2, 36.7, 35.8, 36.6, 36.4, 36.4, 36.6, 36.5, 36.5,
36.6, 36.2, 36.4
)
pulses <- c(80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
80, 80, 80, 80, 80, 80, 80, 80, 80, 70, #first true
75, 61, 85, 85, 68, 74, 64, 80, 85, 67,
95, 86, 82, 90, 72, 70, 84, 83, 85, 85,
82, 72, 82, 74, 85, 68, 78, 83, 85, 87,
74, 82, 85
)
df <- data.frame(times, temps, pulses)
times <- c(as.POSIXct(strptime("2022-03-28 04:35:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-28 08:30:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-28 11:45:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-28 12:52:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-28 13:25:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-28 04:35:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-29 07:55:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-29 08:50:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-29 09:20:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-29 10:35:10", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-29 10:58:36", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-29 11:13:06", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-29 16:05:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-29 20:24:38", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-30 04:45:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-30 07:41:05", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-30 09:50:17", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-30 12:09:43", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-30 13:57:26", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-30 18:58:20", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-30 21:07:37", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-31 04:40:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-31 05:00:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-31 07:26:39", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-31 09:26:40", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-31 12:20:14", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-31 14:48:46", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-31 18:57:13", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-03-31 20:06:28", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-01 04:25:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-01 08:05:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-01 09:48:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-01 13:38:41", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-01 18:36:59", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-01 20:32:41", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-02 05:50:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-02 08:51:10", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-02 15:50:49", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-02 19:15:59", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-02 20:08:52", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-04 04:40:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-04 09:06:50", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-04 14:43:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-04 04:35:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-05 07:49:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-06 04:35:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-06 09:05:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-06 13:49:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-06 15:31:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-07 07:36:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-07 13:18:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-07 15:15:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-08 08:04:00", "%Y-%m-%d %H:%M:%S", tz = "UTC")),
as.POSIXct(strptime("2022-04-08 09:47:00", "%Y-%m-%d %H:%M:%S", tz = "UTC"))
)
temps <- c(35.4, 36.1, 36.3, 36.3, 36.3, 35.8, 36.1, 36.3, 36.3, 36.4,
36.4, 36.3, 36.2, 35.8, 36.4, 36.0, 36.1, 36.4, 36.3, 36.1,
35.8, 36.3, 36.0, 36.4, 36.3, 36.5, 36.3, 35.9, 36.2, 36.1,
36.5, 36.4, 36.3, 36.5, 35.9, 36.6, 36.6, 36.1, 36.4, 36.2,
35.8, 36.2, 36.7, 35.8, 36.6, 36.4, 36.4, 36.6, 36.5, 36.5,
36.6, 36.2, 36.4, 36.3
)
pulses <- c(80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
80, 80, 80, 80, 80, 80, 80, 80, 80, 70, #first true
75, 61, 85, 85, 68, 74, 64, 80, 85, 67,
95, 86, 82, 90, 72, 70, 84, 83, 85, 85,
82, 72, 82, 74, 85, 68, 78, 83, 85, 87,
74, 82, 85, 80
)
df <- data.frame(times, temps, pulses)
# Chunk 1
#install.packages("tidyverse")
library(glmnet)
library(gbm)
library(tidyverse)
df <- read_rds(file = "datasets/ALS_data_regression/ALS_progression_rate.1822x370.rds")  %>% tbl_df()
df <- df %>% rename(response = dFRS)
head(df)
# Chunk 2
set.seed(0)
data_train    <- df %>% filter(!is.na(response))
data_predict  <- df %>% filter(is.na(response))
dim(data_predict)
dim(data_train)
# Always make the same split
set.seed(0)
# We use 80% for training and 20% for evaluation
trainfold <- data_train %>% sample_frac(size=0.80)
testfold  <- setdiff(data_train, trainfold)
# We fit our model to the training fold
fit <-  gbm(formula  = response ~ .,data = trainfold, n.trees = 118)
# We predict on the test fold
predicted <- predict(fit, newdata = testfold)
# We compare with the observed values and calculate RMSE
observed  <- testfold$response
mse       <- mean((observed-predicted)^2)
(rmse     <- sqrt(mse))
test_rmse <- rmse # Our guess on the general rmse of the model (very unprecise!)
pd  <- tibble(observed, predicted) %>%
mutate(residual = observed - predicted)
ggplot(pd, aes(x=predicted, y=observed)) +
geom_point() +
theme_classic() +
NULL
ggplot(pd, aes(x=predicted, y=residual)) +
geom_point() +
geom_hline(yintercept = 0, linetype="dashed") +
theme_classic() +
NULL
rm(pd)
fit <-  gbm(formula  = response ~ .,data = data_train, n.trees = 118)
predicted <- predict(object=fit, newdata = data_predict, type = "response")
submission <- tibble(predicted)
head(submission)
team_name        <- "team_NA"
team_people      <- c("Nicklas", "Astrid")
team_error_rate  <- test_rmse
team_predictions <- submission # This should be a tibble with a column called "predicted"
#
# Always run this code
# If it fails you have done something wrong!
#
# Extract the columns needed
team_predictions <- team_predictions %>% select(predicted)
# Save all the stuff in one object
write_rds(x = list(team_name, team_people, team_error_rate, team_predictions),
file = paste("als_progression.", team_name, ".rds", sep=""))
files   <- Sys.glob("als_progression.*.rds")
results <- tibble(filename = files, team_name=NA, team_people=NA, team_rmse=NA,n=NA, mean=NA)
for (i in 1:nrow(results)) {
x <- read_rds(file = as.character(results$filename[i]))
results$team_name[i]        <- x[[1]]
results$team_people[i]      <- paste(x[[2]], collapse=",", sep=" ")
results$team_rmse[i]        <- x[[3]]
y                           <- x[[4]]
results$n                   <- nrow(y)
results$mean                <- mean(y$predicted, na.rm = T)
results$submission[i]       <- list(x[[4]])
}
rm(x,y)
results %>% select(-filename)
results$submission[[1]]
# Chunk 1
library(tidyverse)
# Chunk 2
df <- read_rds(file = "datasets/TCGA_cancer_classification/miniTCGA.3349x4006.rds")
# Chunk 3
df[1:10,1:10]
# Chunk 4
set.seed(0)
data_train    <- df %>% filter(!is.na(response))
data_predict  <- df %>% filter(is.na(response))
dim(data_predict)
dim(data_train)
# Chunk 5
# Round 2
# Always make the same split
set.seed(0)
# We use 80% for training and 20% for evaluation
trainfold <- data_train %>% sample_frac(size=0.80)
testfold  <- setdiff(data_train, trainfold)
# We fit our model (simple logistic regression on pc1 and pc2 with interaction)
fit <-  glm(response ~ pc1 + pc2 + pc3 + AQP2.359 + HMGCS2.3158 + GPD1.2819 + LOC284578.284578 + CST1.1469 + CHRDL1.91851, data = trainfold, family=binomial(link='logit'))
# We predict on the test fold
predicted <- predict(fit, newdata = testfold, type = "response")
predicted <- round(predicted)+1 # Convert probabilities to 1 or 2
predicted <- levels(trainfold$response)[predicted]
# We compare with the observed values and calculate error rate
observed    <- testfold$response
# Our guess on the general error rate of the model (very unprecise!)
(test_error <- sum(observed!=predicted)/length(observed))
# Fit on all data
fit <-  glm(response ~ pc1 + pc2 + pc3 + AQP2.359 + HMGCS2.3158 + GPD1.2819 + LOC284578.284578 + CST1.1469 + CHRDL1.91851, data = data_train, family=binomial(link='logit'))
predicted <- predict(fit, newdata = testfold, type = "response")
predicted <- round(predicted)+1 # Convert probabilities to 1 or 2
predicted <- levels(trainfold$response)[predicted]
# Chunk 6
ggplot(df, aes(x=pc1, y=pc2, color=response)) +
geom_point() +
theme_classic()
ggplot(df, aes(x=pc1, y=pc3, color=response)) +
geom_point() +
theme_classic()
ggplot(df, aes(x=pc2, y=pc3, color=response)) +
geom_point() +
theme_classic()
ggplot(df, aes(x=pc1, y=pc2, color=tissue)) +
geom_point() +
theme_classic()
ggplot(df, aes(x=pc1, y=pc3, color=tissue)) +
geom_point() +
theme_classic()
ggplot(df, aes(x=pc2, y=pc3, color=tissue)) +
geom_point() +
theme_classic()
# Chunk 7
#fit <-  glm(response ~ pc2 * pc3, data = data_train, family=binomial(link='logit'))
#predicted <- predict(fit, newdata = data_predict, type = "response")
#predicted <- round(predicted)+1 # Convert probabilities to 1 or 2
#predicted <- levels(data_train$response)[predicted]
submission <- tibble(predicted)
head(submission)
# Overwrite submission above:
# We use the predictions we made using some other (python) code, this is just the results:
#submission <- readRDS("Round 1/TCGA final predictions df.rds")
# Chunk 8
team_name        <- "team_NA"
team_people      <- c("Nicklas", "Astrid")
team_error       <- test_error
team_predictions <- submission
#
# Always run this code
# If it fails you have done something wrong!
#
# Extract the columns needed
team_predictions <- team_predictions %>% select(predicted)
# Save all the stuff in one object
write_rds(x = list(team_name, team_people, team_error, team_predictions),
file = paste("minitcga_cancer_classification.", team_name, ".rds", sep=""))
# Chunk 9
files   <- Sys.glob("minitcga_cancer_classification.*.rds")
results <- tibble(filename = files)
for (i in 1:nrow(results)) {
x <- read_rds(file = as.character(results$filename[i]))
results$team_name[i]     <- x[[1]]
results$team_people[i]   <- paste(x[[2]], collapse=",", sep=" ")
results$team_error[i]    <- x[[3]]
y                        <- x[[4]]
results$n_tumor          <- sum(y$predicted=="Tumor")
results$n_normal         <- sum(y$predicted=="Normal")
results$submission[i]    <- list(x[[4]])
}
rm(x,y)
results %>% select(-filename)
results$submission[[1]]
library(tidyverse)
library(randomForest)
df <- read_rds(file = "datasets/TCGA_cancer_classification/miniTCGA.3349x4006.rds")
df[1:10,1:10]
set.seed(0)
data_train    <- df %>% filter(!is.na(response))
data_predict  <- df %>% filter(is.na(response))
dim(data_predict)
dim(data_train)
View(data_train)
fit <- randomForest(response ~ ., data = trainfold)
# Always make the same split
set.seed(0)
# We use 80% for training and 20% for evaluation
trainfold <- data_train %>% sample_frac(size=0.80)
testfold  <- setdiff(data_train, trainfold)
# We fit our model (simple logistic regression on pc1 and pc2 with interaction)
#fit <-  glm(response ~ pc2 * pc3, data = trainfold, family=binomial(link='logit'))
fit <- randomForest(response ~ ., data = trainfold)
# We predict on the test fold
predicted <- predict(fit, newdata = testfold, type = "response")
predicted <- round(predicted)+1 # Convert probabilities to 1 or 2
predicted <- levels(trainfold$response)[predicted]
# We compare with the observed values and calculate error rate
observed    <- testfold$response
# Our guess on the general error rate of the model (very unprecise!)
(test_error <- sum(observed!=predicted)/length(observed))
ggplot(df, aes(x=pc1, y=pc2, color=response)) +
geom_point() +
theme_classic()
ggplot(df, aes(x=pc1, y=pc3, color=response)) +
geom_point() +
theme_classic()
ggplot(df, aes(x=pc2, y=pc3, color=response)) +
geom_point() +
theme_classic()
ggplot(df, aes(x=pc1, y=pc2, color=tissue)) +
geom_point() +
theme_classic()
ggplot(df, aes(x=pc1, y=pc3, color=tissue)) +
geom_point() +
theme_classic()
ggplot(df, aes(x=pc2, y=pc3, color=tissue)) +
geom_point() +
theme_classic()
#fit <-  glm(response ~ pc2 * pc3, data = data_train, family=binomial(link='logit'))
fit <- randomForest(response ~ ., data = data_train)
predicted <- predict(fit, newdata = data_predict, type = "response")
predicted <- round(predicted)+1 # Convert probabilities to 1 or 2
predicted <- levels(data_train$response)[predicted]
submission <- tibble(predicted = predicted)
head(submission)
team_name        <- "team_NA"
team_people      <- c("Nicklas", "Astrid")
team_error       <- test_error
team_predictions <- submission
#
# Always run this code
# If it fails you have done something wrong!
#
# Extract the columns needed
team_predictions <- team_predictions %>% select(predicted)
# Save all the stuff in one object
write_rds(x = list(team_name, team_people, team_error, team_predictions),
file = paste("minitcga_cancer_classification.", team_name, ".rds", sep=""))
files   <- Sys.glob("minitcga_cancer_classification.*.rds")
results <- tibble(filename = files)
for (i in 1:nrow(results)) {
x <- read_rds(file = as.character(results$filename[i]))
results$team_name[i]     <- x[[1]]
results$team_people[i]   <- paste(x[[2]], collapse=",", sep=" ")
results$team_error[i]    <- x[[3]]
y                        <- x[[4]]
results$n_tumor          <- sum(y$predicted=="Tumor")
results$n_normal         <- sum(y$predicted=="Normal")
results$submission[i]    <- list(x[[4]])
}
rm(x,y)
results %>% select(-filename)
results$submission[[1]]
